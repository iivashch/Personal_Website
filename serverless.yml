service: express-blog-app

frameworkVersion: '4.10.1'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  timeout: 29
  apiGateway:
    binaryMediaTypes:
      - '*/*'                    # enable binary (image, pdf, etc.)
      - 'multipart/form-data'   # form uploads
      - 'image/jpeg'
      - 'image/png'
      - 'application/octet-stream'
  environment:
    MONGO_URI: ${env:MONGO_URI}
    SECRET_KEY: ${env:SECRET_KEY}
    ADMIN_USERNAME: ${env:ADMIN_USERNAME}
    ADMIN_PASSWORD: ${env:ADMIN_PASSWORD}
    FRED_API: ${env:FRED_API}

functions:
  app:
    handler: lambda.handler
    events:
      - http:
          path: /
          method: any
      - http:
          path: /{proxy+}
          method: any

  fetchDashboard:
    name: express-blog-app-dev-fetchDashboard
    handler: py_fetcher/handler.run
    runtime: python3.11
    timeout: 30
    memorySize: 512
    environment:
      MONGO_URI: ${env:MONGO_URI}
      SECRET_KEY: ${env:SECRET_KEY}
      ADMIN_USERNAME: ${env:ADMIN_USERNAME}
      ADMIN_PASSWORD: ${env:ADMIN_PASSWORD}
      FRED_API: ${env:FRED_API}

  serveImage:
    handler: binaryServe.handler   # ✅ make sure this points to binaryImage.js
    events:
      - http:
          path: files/{proxy+}
          method: get

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager

custom:
  customDomain:
    domainName: iivashch.click
    basePath: ''
    stage: dev
    createRoute53Record: true
    endpointType: regional
  dotenv:
    basePath: ./
  pythonRequirements:
    pythonBin: python3

package:
  include:
    - 'public/data/**'
  patterns:
    - '!node_modules/**'
    - 'node_modules/express/**'
    - 'node_modules/**'
    - 'app.js'
    - 'lambda.js'
    - 'routes/**'
    - 'models/**'
    - 'middleware/**'
    - 'views/**'
    - 'binaryImage.js'       # ✅ include your image lambda
  exclude:
    - .git/**
    - .gitignore
    - README.md
    - .vscode/
    - .env
    - .DS_Store
